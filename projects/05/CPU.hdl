// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // C命令 か A命令 かを確かめて、Aregisterに送る値を変更する
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=to-a-regi);

    // ARegister に値を保存するかどうか確かめる。A命令 または dest領域の d1 が 1のとき、先ほど選択した値をARegisterへと保存する。
    Not(in=instruction[15], out=isAInstr);
    Or(a=isAInstr, b=instruction[5], out=loadA);
    ARegister(in=to-a-regi, load=loadA, out=out-a-regi, out[0..14]=addressM);

    // comp領域のa(instruction[12])を先に確認。これが 1 のときは、ARegisterからの値でなく、Memoryの値を受け取ってからの操作となる。
    Mux16(a=out-a-regi, b=inM, sel=instruction[12], out=to-alu-y);

    ALU(x=out-d-regi, y=to-alu-y,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        zr=aluzr, ng=alung, out=aluout, out=outM);

    // ALUの計算結果が正の数かどうか確かめる
    Not(in=aluzr, out=notzr);
    Not(in=alung, out=notng);
    And(a=notzr, b=notng, out=pos);

    // jump のための値設定
    And(a=instruction[2], b=alung, out=negjump); // 負の数ならjump
    And(a=instruction[1], b=aluzr, out=zerjump); // ゼロならjump
    And(a=instruction[0], b=pos, out=posjump); // 正の数ならjump

    Or(a=negjump, b=zerjump, out=jump1);
    Or(a=jump1, b=posjump, out=jump); // jump が 1 のとき、jumpする

    And(a=jump, b=instruction[15], out=loadpc); // C命令 かつ jump が1である

    PC(in=out-a-regi, load=loadpc, inc=true, reset=reset, out[0..14]=pc);

    // C命令 かつ dest領域の d2 が 2 のとき、ALUの出力結果をDRegisterへ保存、そうでない場合は保存しない。
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluout, load=loadD, out=out-d-regi);

    // C命令 かつ dest領域の d3 が 1 のとき、Memory への書き込みが行われる
    And(a=instruction[15], b=instruction[3], out=writeM);
}